lights:
	intensity: 20
	color: 50:50:50
	pos: 10:15:15
sphere:
	center: 100:10:200
	color: 20:20:20
	radius: 25
lights:
	intensity: 30
	color: 50:50:50
	pos: 10:19:19
cylinder:
	center: 4:5:7
	color: 255:0:0
	radius: 39
	axis: 12:12:12
cylinder:
	center: 4:5:7
	color: 255:0:0
	radius: 25
	axis: 12:12:12
sphere:
	center: 100:10:200
	color: 255:0:0
	radius: 25
plan:
	center: 4:5:7
	color: 255:0:0
	radius: 60
	axis: 12:12:12
plan:
	center: 84:10:7
	color: 2:50:1
	radius: 25
	axis: 12:12:12
camera:
	lokat: 100:10:12
	lokfrm: 10:10:12
cone:
	center: 10:4:2
	color: 4:3:2
	angle: 50
	axis: 50:10:20




	// while ((*rt)->tmpo)
	// {
	// 	tmp->tmpo = (*rt)->tmpo->next;
	// 	free((*rt)->tmpo);
	// 	(*rt)->tmpo = NULL;
	// 	(*rt)->tmpo = tmp->tmpo;
	// }
	// while ((*rt)->tmpl)
	// {
	// 	tmp->tmpl = (*rt)->tmpl->next;
	// 	free((*rt)->tmpl);
	// 	(*rt)->tmpl = NULL;
	// 	(*rt)->tmpl = tmp->tmpl;
	// }






	l = rt.lights;
	o = rt.obj;
	printf("x: %lf\ty: %lf\tz: %lf\n", rt.cam.lokat.x, rt.cam.lokat.y, rt.cam.lokat.z);
	printf("x: %lf\ty: %lf\tz: %lf\n", rt.cam.lokfrm.x, rt.cam.lokfrm.y, rt.cam.lokfrm.z);
	while (l)
	{
		printf("intensity: %lf\tcolor.x: %lf\tcolor.y: %lf\tcolor.z: %lf\tpos.x: %lf\tpos.y: %lf\tpos.z: %lf\n", l->intensity, l->color.x, l->color.y, l->color.z, l->pos.x, l->pos.y, l->pos.z);
		l = l->next;
	}
	while (o)
	{
		printf("center.x: %lf\tcenter.y: %lf\tcenter.z: %lf\tcolor.x: %lf\tcolor.y: %lf\tcolor.z: %lf\tradius: %lf\taxis.x: %lf\taxis.y: %lf\taxis.z: %lf\tangle: %lf\ttype: %d\n", o->center.x, o->center.y, o->center.z, o->color.x, o->color.y, o->color.z, o->radius, o->v.x, o->v.y, o->v.z, o->angle, o->type);
		o = o->next;
	}






// t_color specular(t_rtv1 *rt, t_obj *close, t_lights *lights, t_color c, int shad)
// {
// 	t_vect reflect;
// 	t_vect lightdir;
// 	double dot1;

// 	lightdir = normalize(moins(lights->pos, rt->ray.hit));
// 	dot1 = dot(close->normal, lightdir);
// 	reflect = normalize(moins(lightdir, multi(close->normal, 2 * dot1)));
// 	if (shad && (dot1 = dot(reflect, normalize(moins(rt->ray.hit, rt->ray.org)))) > 0)
// 		c = add_color(c, multi_color(lights->color, powf(dot1, 80)));
// 	return (c);
// }








#include "rtv1.h"

int				parse1(t_rtv1 *rt, char *str, int fd)
{
	t_obj		*tmpo;
	t_lights	*tmpl;
	int			i;
	int			j;

	i = 0;
	j = 0;
	if (ft_strcmp(str, "camera:") == 0 && j == 0)
	{
		if (camera(&rt->cam, str, fd) == -1)
			return (-1);
		j++;
	}
	else if (ft_strcmp(str, "lights:") == 0)
	{
		tmpl = (t_lights *)malloc(sizeof(t_lights));
		if (i > i + 1)
		{
			if (lights(tmpl, str, fd) == -1)
				return (-1);
		}
		else if (lights(tmpl, str, fd) == -1)
			return (-1);
		i++;
		tmpl->next = rt->lights;
		rt->lights = tmpl;
	}
	else if (ft_strcmp(str, "sphere:") == 0)
	{
		tmpo = (t_obj *)malloc(sizeof(t_obj));
		if (i > i + 1)
		{
			if (sphere(tmpo, str, fd) == -1)
				return (-1);
		}
		if (sphere(tmpo, str, fd) == -1)
			return (-1);
		i++;
		tmpo->next = rt->obj;
		rt->obj = tmpo;
	}
	else if (ft_strcmp(str, "cylinder:") == 0)
	{
		tmpo = (t_obj *)malloc(sizeof(t_obj));
		if (i > i + 1)
		{
			if (cylinder(tmpo, str, fd) == -1)
				return (-1);
		}
		if (cylinder(tmpo, str, fd) == -1)
			return (-1);
		i++;
		tmpo->next = rt->obj;
		rt->obj = tmpo;
	}
	else if (ft_strcmp(str, "cone:") == 0)
	{
		tmpo = (t_obj *)malloc(sizeof(t_obj));
		if (i > i + 1)
		{
			if (cone(tmpo, str, fd) == -1)
				return (-1);
		}
		if (cone(tmpo, str, fd) == -1)
			return (-1);
		i++;
		tmpo->next = rt->obj;
		rt->obj = tmpo;
	}
	else if (ft_strcmp(str, "plan:") == 0)
	{
		tmpo = (t_obj *)malloc(sizeof(t_obj));
		if (i > i + 1)
		{
			if (plan(tmpo, str, fd) == -1)
				return (-1);
		}
		if (plan(tmpo, str, fd) == -1)
			return (-1);
		i++;
		tmpo->next = rt->obj;
		rt->obj = tmpo;
	}
	free(str);
	return (1);
}

int parse(t_rtv1 *rt, int fd)
{
	char *str;

	while (fd > 2 && get_next_line(fd, &str) > 0)
	{
		if (parse1(rt, str, fd) == -1)
			return (-1);
	}
	return (1);
}
